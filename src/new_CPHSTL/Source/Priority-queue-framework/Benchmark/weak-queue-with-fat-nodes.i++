#include "fat-weak-heap-node.h++"
#include <memory>
#include "perfect-component.h++"
#include "priority-queue-framework.h++"
#include "priority-queue-iterator.h++"
#include "stl-meldable-priority-queue.h++"

long long comps = 0;

template <typename T>
class counting_comparator {
public:

  bool operator()(T const& a, T const& b) const {
    ++comps;
    return a < b;
  }
};

typedef long long V;
typedef counting_comparator<V> C;
typedef std::allocator<V> A;
typedef cphstl::fat_weak_heap_node<V, A> N;
typedef cphstl::perfect_component<N> P;
typedef cphstl::priority_queue_iterator<N, P> I;
typedef cphstl::priority_queue_iterator<N, P, true> J;
typedef cphstl::priority_queue_framework<V, C, A, N, P> R; 
typedef cphstl::meldable_priority_queue<V, C, A, N, P, R, I, J> Q;
