const bool careful(true);

//#include "../../../Progress/Meldable-priority-queue/Asger-weak-binomial-mixed/Code/CPHSTL_modified/assert.h++"

#include "stl-meldable-priority-queue.h++"
//#include "../../Iterator/Code/node-iterator.h++"

#include "../../../Progress/Meldable-priority-queue/Asger-weak-binomial-mixed/Code/pwh_node.hpp"
#include "../../../Progress/Meldable-priority-queue/Asger-weak-binomial-mixed/Code/node_with_indirect_value.hpp"
#include "../../../Progress/Meldable-priority-queue/Asger-weak-binomial-mixed/Code/node_with_facade.hpp"
#include "../../../Progress/Meldable-priority-queue/Asger-weak-binomial-mixed/Code/direct_binary_heap_store.h++"


long long comps = 0;

template <typename T>
class counting_comparator {
public:

  bool operator()(T const& a, T const& b) const {
    ++comps;
    return a < b;
  }
};


using namespace cphstl;
using namespace pqfw_node;

typedef long long V;
typedef counting_comparator<V> C;
typedef std::allocator<V> A;
typedef w_facade<w_indirect_value<pwh_node_base, V, C, A> > E;
typedef perfect_component<E> P;
typedef cphstl::priority_queue_framework<V, C, A, E, P> R;
typedef cphstl::priority_queue_iterator<E, P> I;
typedef cphstl::priority_queue_iterator<E, P, true> J;
typedef cphstl::meldable_priority_queue<V,C,A,E,P,R,I,J> Q;
